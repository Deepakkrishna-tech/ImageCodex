# src/app.py
"""
The main user interface for the VisionPrompt Agent, built with Streamlit.
This script handles the UI layout, user interactions, and calls the LangGraph agentic workflow.
"""

# --- [SETUP] ---
import sys
import os
from dotenv import load_dotenv
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
load_dotenv()
if not os.getenv("OPENAI_API_KEY"):
    print("üî¥ FATAL ERROR: OpenAI API key not found.")
    raise ValueError("Please set the OPENAI_API_KEY in your .env file to run the application.")
# --- [END OF SETUP] ---

# --- 1. IMPORTS ---
import streamlit as st
from PIL import Image
import base64
from io import BytesIO
from src.graph import graph_app, refinement_node

# --- 2. PAGE CONFIGURATION ---
st.set_page_config(
    page_title="VisionPrompt Agent", page_icon="üß©", layout="wide", initial_sidebar_state="expanded"
)

# --- 3. SESSION STATE & CALLBACKS ---
# Initialize session state
if "generated_prompt" not in st.session_state:
    st.session_state.generated_prompt = "The prompt generated by the agent will appear here."
if "prompt_history" not in st.session_state:
    st.session_state.prompt_history = []
if "uploaded_file_id" not in st.session_state:
    st.session_state.uploaded_file_id = None

# --- Callback Functions ---
def run_analysis_workflow():
    """Callback to run the full analysis workflow."""
    uploaded_file = st.session_state.get("file_uploader_widget")
    target_style = st.session_state.get("target_style_widget")

    if uploaded_file:
        with st.spinner("ü§ñ The agents are analyzing the image... Please wait."):
            try:
                buffered = BytesIO(uploaded_file.getvalue())
                image_b64 = base64.b64encode(buffered.read()).decode('utf-8')
                initial_state = {"image_data": image_b64, "target_style": target_style, "prompt_history": []}
                final_state = graph_app.invoke(initial_state, config={"recursion_limit": 15})
                st.session_state.generated_prompt = final_state.get("initial_prompt", "Error: Could not generate prompt.")
                st.session_state.prompt_history = final_state.get("prompt_history", [])
            except Exception as e:
                st.error(f"An error occurred during analysis: {e}")
    else:
        st.warning("‚ö†Ô∏è Please upload an image first.")

def run_refinement_workflow():
    """Callback to run the prompt refinement workflow."""
    refinement_instruction = st.session_state.get("refinement_input_widget")
    
    if not st.session_state.prompt_history:
        st.warning("‚ö†Ô∏è Please generate a prompt first before refining.")
    elif not refinement_instruction:
        st.warning("‚ö†Ô∏è Please enter a refinement instruction.")
    else:
        with st.spinner("ü§ñ The refinement agent is at work..."):
            try:
                refinement_state = {"prompt_history": st.session_state.prompt_history, "refinement_instruction": refinement_instruction}
                refinement_result = refinement_node(refinement_state)
                st.session_state.generated_prompt = refinement_result.get("refined_prompt")
                st.session_state.prompt_history = refinement_result.get("prompt_history")
            except Exception as e:
                st.error(f"An error occurred during refinement: {e}")

# --- 4. UI LAYOUT ---
with st.sidebar:
    st.title("üß© VisionPrompt Agent")
    st.markdown("Reverse engineer any image into a detailed, structured prompt.")
    st.subheader("1. Upload an Image")
    st.file_uploader("...", type=["jpg", "png", "webp"], label_visibility="collapsed", key="file_uploader_widget")
    st.subheader("2. Define a Style (Optional)")
    st.text_input("...", value="A detailed, high-resolution photorealistic style", label_visibility="collapsed", key="target_style_widget")
    st.button("‚ú® Analyze and Generate Prompt", use_container_width=True, type="primary", on_click=run_analysis_workflow)
    if st.button("Start Over", use_container_width=True):
        st.session_state.generated_prompt, st.session_state.prompt_history, st.session_state.uploaded_file_id = "The prompt generated by the agent will appear here.", [], None
        st.rerun()

st.header("üñºÔ∏è Image & Generated Prompt")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Your Image")
    uploaded_file = st.session_state.get("file_uploader_widget")
    if uploaded_file:
        if st.session_state.uploaded_file_id != uploaded_file.file_id:
             st.session_state.uploaded_file_id, st.session_state.prompt_history = uploaded_file.file_id, []
             st.session_state.generated_prompt = "New image uploaded. Click 'Analyze' to generate a prompt."
        st.image(Image.open(uploaded_file), caption="Your uploaded image.", use_container_width=True)
    else:
        st.info("Upload an image in the sidebar to get started.")
with col2:
    st.subheader("Generated Prompt")
    st.text_area("...", value=st.session_state.generated_prompt, height=350, key="prompt_display_area", label_visibility="collapsed")

st.divider()
st.header("üîÅ Refinement & History")
refinement_col, history_col = st.columns(2)
with refinement_col:
    st.subheader("Refine Your Prompt")
    st.text_area("...", key="refinement_input_widget", label_visibility="collapsed", placeholder="e.g., make it more cinematic, change the season to winter")
    st.button("üîÑ Refine Prompt", use_container_width=True, on_click=run_refinement_workflow)
with history_col:
    st.subheader("Prompt History")
    with st.expander("View past prompt versions", expanded=True):
        if st.session_state.prompt_history:
            for prompt in reversed(st.session_state.prompt_history):
                st.code(prompt, language="text")
        else:
            st.info("No prompt history yet.")

# --- The main script body is now clean. All logic is in callbacks. ---