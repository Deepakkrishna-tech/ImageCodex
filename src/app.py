# src/app.py

# src/app.py

# --- [THE FIX] ---
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
# --- [END OF THE FIX] ---

# --- LOAD SECRETS FIRST ---
from dotenv import load_dotenv
load_dotenv()
if not os.getenv("OPENAI_API_KEY"):
    # We can't use st.error here yet because streamlit hasn't been imported.
    # So we'll print to the console and raise an exception.
    print("üî¥ FATAL ERROR: OpenAI API key not found.")
    raise ValueError("Please set the OPENAI_API_KEY in your .env file.")
# --- END OF SECRET LOADING ---


# --- 1. IMPORTS ---
import streamlit as st
from PIL import Image
import base64
from io import BytesIO
from src.graph import graph_app

# --- 2. PAGE CONFIGURATION ---
st.set_page_config(
    page_title="VisionPrompt Agent",
    page_icon="üß©",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- 4. SESSION STATE INITIALIZATION ---
if "generated_prompt" not in st.session_state:
    st.session_state.generated_prompt = "The prompt generated by the agent will appear here."
if "prompt_history" not in st.session_state:
    st.session_state.prompt_history = []
if "uploaded_file_id" not in st.session_state:
    st.session_state.uploaded_file_id = None


# --- 5. UI LAYOUT ---
# --- SIDEBAR ---
with st.sidebar:
    st.title("üß© VisionPrompt Agent")
    st.markdown("Reverse engineer any image into a detailed, structured prompt.")
    st.subheader("1. Upload an Image")
    uploaded_file = st.file_uploader(
        "Choose an image...", type=["jpg", "png", "webp"], label_visibility="collapsed"
    )
    st.subheader("2. Define a Style (Optional)")
    target_style = st.text_input(
        "e.g., 'pixel art', 'photorealistic', 'watercolor'",
        value="A detailed, high-resolution photorealistic style"
    )
    analyze_button = st.button(
        "‚ú® Analyze and Generate Prompt", use_container_width=True, type="primary"
    )
    if st.button("Start Over", use_container_width=True):
        st.session_state.generated_prompt = "The prompt generated by the agent will appear here."
        st.session_state.prompt_history = []
        st.session_state.uploaded_file_id = None
        st.rerun()

# --- MAIN CONTENT AREA ---
st.header("üñºÔ∏è Image & Generated Prompt")
col1, col2 = st.columns(2)
with col1:
    st.subheader("Your Image")
    if uploaded_file:
        if st.session_state.uploaded_file_id != uploaded_file.file_id:
             st.session_state.uploaded_file_id = uploaded_file.file_id
             st.session_state.generated_prompt = "New image uploaded. Click 'Analyze' to generate a prompt."
             st.session_state.prompt_history = []
        image = Image.open(uploaded_file)
        st.image(image, caption="Your uploaded image.", use_container_width=True)
    else:
        st.info("Upload an image in the sidebar to get started.")
with col2:
    st.subheader("Generated Prompt")
    st.text_area(
        "Prompt", value=st.session_state.generated_prompt, height=250,
        key="prompt_display_area", label_visibility="collapsed",
    )
st.divider()
st.header("üîÅ Refinement & History")
refinement_col, history_col = st.columns(2)
with refinement_col:
    st.subheader("Refine Your Prompt")
    refinement_instruction = st.text_area(
        "e.g., 'make it more cinematic', 'change the season to winter'",
        key="refinement_input", label_visibility="collapsed",
    )
    refine_button = st.button("üîÑ Refine Prompt", use_container_width=True)
with history_col:
    st.subheader("Prompt History")
    with st.expander("View past prompt versions", expanded=True):
        if st.session_state.prompt_history:
            for i, prompt in enumerate(reversed(st.session_state.prompt_history)):
                st.code(prompt, language="text")
        else:
            st.info("No prompt history yet.")

# --- 6. WORKFLOW LOGIC ---
if analyze_button:
    if uploaded_file:
        with st.spinner("ü§ñ The agents are analyzing the image... Please wait."):
            try:
                buffered = BytesIO(uploaded_file.getvalue())
                image_b64 = base64.b64encode(buffered.read()).decode('utf-8')
                initial_state = {
                    "image_data": image_b64,
                    "target_style": target_style, "prompt_history": [],
                }
                final_state = graph_app.invoke(initial_state, config={"recursion_limit": 10})
                final_prompt = final_state.get("initial_prompt", "Error: Could not generate prompt.")
                st.session_state.generated_prompt = final_prompt
                st.session_state.prompt_history = final_state.get("prompt_history", [])
                st.rerun()
            except Exception as e:
                st.error(f"An error occurred during analysis: {e}")
    else:
        st.warning("‚ö†Ô∏è Please upload an image first.")

if refine_button:
    if not st.session_state.prompt_history:
        st.warning("‚ö†Ô∏è Please generate a prompt first before refining.")
    elif not refinement_instruction:
        st.warning("‚ö†Ô∏è Please enter a refinement instruction.")
    else:
        st.info("Refinement functionality is the next step!")
        new_prompt = f"This is a refined prompt based on: '{refinement_instruction}'"
        st.session_state.generated_prompt = new_prompt
        st.session_state.prompt_history.append(new_prompt)
        st.rerun()